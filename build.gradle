plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2021.2.2"
}

wpi.maven.useDevelopment = true
wpi.wpilibVersion = '2021.+'


apply plugin: "java"

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamNumber()
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
            //This block comment enables JMX remote, which allows you to visualize the profile of the virtual machine (see VirtualVM, because that's what we used).
            /*jvmArgs = [
                    "-Dcom.sun.management.jmxremote=true",
                "-Dcom.sun.management.jmxremote.port=1099",
                "-Dcom.sun.management.jmxremote.local.only=false",
                "-Dcom.sun.management.jmxremote.ssl=false",
                "-Dcom.sun.management.jmxremote.authenticate=false",
                "-Djava.rmi.server.hostname=10.59.87.2"
            ]*/
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Set this to true to enable desktop support.
def includeDesktopSupport = false

repositories {
    maven { url 'https://jitpack.io' }
    flatDir {
        dirs 'libs'
    }
}

test {
    useJUnitPlatform()
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    implementation wpi.deps.wpilib()
    nativeZip wpi.deps.wpilibJni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.wpilibJni(wpi.platforms.desktop)


    implementation "com.github.Oblarg.Oblog:lib:3.1.0"

    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'

    implementation 'org.ghrobotics.FalconLibrary:wpi:2020.2.2'

    implementation 'com.sparkjava:spark-core:2.8.0'
    implementation 'com.sparkjava:spark-template-velocity:2.7.1'

    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'

    implementation wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
//"groupId": "org.photonvision.lib",
//      "artifactId": "PhotonLib-java",
//      "version": "2021.1.2"
    implementation group: "org.photonvision.lib", name: "PhotonLib-java", version: "2021.1.2"
    // Enable simulation gui support. Must check the box in vscode to enable support
    // upon debugging
    simulation wpi.deps.sim.gui(wpi.platforms.desktop, false)
    // https://mvnrepository.com/artifact/org.eclipse.jetty/jetty-server
//    implementation group: 'org.eclipse.jetty', name: 'jetty-server', version: '11.0.1'

}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}
